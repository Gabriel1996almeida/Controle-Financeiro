<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Controle Financeiro - Gabriel Almeida</title>
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<style>
  body {
    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    background: #f9f9f9;
    margin: 0;
    padding: 0 1rem 3rem 1rem;
    color: #222;
  }
  header {
    text-align: center;
    font-size: 1.8rem;
    font-weight: 700;
    margin: 1rem 0;
    color: #1976d2;
  }
  .tabs {
    display: flex;
    justify-content: center;
    margin-bottom: 1rem;
  }
  .tab {
    cursor: pointer;
    padding: 0.5rem 1rem;
    border-bottom: 3px solid transparent;
    font-weight: 600;
    color: #444;
    transition: border-color 0.3s;
  }
  .tab.active {
    border-color: #1976d2;
    color: #1976d2;
  }
  .button-group {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
  }
  button {
    background-color: #1976d2;
    border: none;
    color: white;
    padding: 0.5rem 1rem;
    font-weight: 600;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  button:hover {
    background-color: #0f4a8a;
  }
  button.red {
    background-color: #d32f2f;
  }
  button.red:hover {
    background-color: #9a2323;
  }
  form {
    max-width: 320px;
    margin: 0 auto 1rem;
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
  }
  label {
    font-weight: 600;
  }
  input[type="number"], input[type="date"] {
    padding: 0.4rem;
    font-size: 1rem;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  input[readonly] {
    background-color: #eee;
  }
  .resumo {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin-bottom: 1rem;
    flex-wrap: wrap;
  }
  .card {
    background: white;
    padding: 1rem 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgb(0 0 0 / 0.1);
    text-align: center;
    min-width: 100px;
  }
  .card h4 {
    margin: 0 0 0.4rem 0;
    color: #555;
  }
  #piechart_3d {
    max-width: 450px;
    margin: 0 auto 1rem;
  }
  #media-container {
    font-weight: 600;
    color: #1976d2;
    text-align: center;
    margin-bottom: 1rem;
  }
  table {
    width: 100%;
    max-width: 600px;
    margin: 0 auto 1rem;
    border-collapse: collapse;
    background: white;
    border-radius: 6px;
    overflow: hidden;
  }
  th, td {
    padding: 0.6rem 0.8rem;
    border-bottom: 1px solid #ddd;
    text-align: center;
  }
  th {
    background: #1976d2;
    color: white;
    font-weight: 600;
  }
  button.delete {
    background-color: #d32f2f;
    padding: 0.25rem 0.6rem;
    font-size: 0.85rem;
    border-radius: 4px;
  }
  button.delete:hover {
    background-color: #9a2323;
  }
  footer {
    position: fixed;
    bottom: 6px;
    left: 0;
    width: 100%;
    text-align: center;
    font-size: 0.75rem;
    color: #999;
    font-style: italic;
    user-select: none;
    pointer-events: none;
  }
</style>
</head>
<body>

<header>Controle Financeiro - Gabriel Almeida</header>

<div class="tabs">
  <div class="tab active" id="tabLancamento">Lançamento</div>
  <div class="tab" id="tabHistorico">Histórico</div>
</div>

<div class="button-group">
  <button id="btnMesAnterior">&lt; Mês Anterior</button>
  <div id="mesAnoAtual" style="font-weight: 600; font-size: 1.1rem; min-width: 180px; text-align: center;"></div>
  <button id="btnMesProximo">Próximo Mês &gt;</button>
</div>

<section id="telaLancamento">
  <form id="formLancamento">
    <label for="ganhosBrutos">Ganhos Brutos:</label>
    <input type="number" id="ganhosBrutos" min="0" step="0.01" required placeholder="R$" />

    <label for="gastos">Gastos:</label>
    <input type="number" id="gastos" min="0" step="0.01" required placeholder="R$" />

    <label for="ganhosLiquidos">Ganhos Líquidos:</label>
    <input type="number" id="ganhosLiquidos" readonly placeholder="R$ 0,00" />

    <button type="submit">Lançar</button>
  </form>

  <div class="button-group" style="justify-content: center; margin-top: 0;">
    <button id="btnApagarMes" class="red">Apagar mês atual</button>
    <button id="btnExportarMes">Exportar Mês</button>
  </div>

  <div class="resumo">
    <div class="card">
      <h4>Ganhos</h4>
      <p id="cardGanhos">R$ 0,00</p>
    </div>
    <div class="card">
      <h4>Gastos</h4>
      <p id="cardGastos">R$ 0,00</p>
    </div>
    <div class="card">
      <h4>Líquidos</h4>
      <p id="cardLiquidos">R$ 0,00</p>
    </div>
  </div>

  <div id="piechart_3d"></div>
  <div id="media-container">Média diária de ganhos: R$ 0,00</div>
</section>

<section id="telaHistorico" style="display:none;">
  <table>
    <thead>
      <tr>
        <th>Data</th>
        <th>Ganhos</th>
        <th>Gastos</th>
        <th>Líquido</th>
        <th>Ações</th>
      </tr>
    </thead>
    <tbody id="historicoBody">
      <tr><td colspan="5" style="text-align:center; color:#777;">Nenhum lançamento registrado para este mês.</td></tr>
    </tbody>
  </table>
</section>

<footer>Desenvolvido por Gabriel Almeida, 2025</footer>

<script>
  google.charts.load("current", { packages: ["corechart"] });

  // Variáveis globais e elementos
  const tabLancamento = document.getElementById("tabLancamento");
  const tabHistorico = document.getElementById("tabHistorico");
  const telaLancamento = document.getElementById("telaLancamento");
  const telaHistorico = document.getElementById("telaHistorico");
  const ganhosBrutosInput = document.getElementById("ganhosBrutos");
  const gastosInput = document.getElementById("gastos");
  const ganhosLiquidosInput = document.getElementById("ganhosLiquidos");
  const formLancamento = document.getElementById("formLancamento");
  const cardGanhos = document.getElementById("cardGanhos");
  const cardGastos = document.getElementById("cardGastos");
  const cardLiquidos = document.getElementById("cardLiquidos");
  const mediaContainer = document.getElementById("media-container");
  const piechartDiv = document.getElementById("piechart_3d");
  const historicoBody = document.getElementById("historicoBody");
  const btnMesAnterior = document.getElementById("btnMesAnterior");
  const btnMesProximo = document.getElementById("btnMesProximo");
  const mesAnoAtual = document.getElementById("mesAnoAtual");
  const btnApagarMes = document.getElementById("btnApagarMes");
  const btnExportarMes = document.getElementById("btnExportarMes");

  const mesesNomes = [
    "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho",
    "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"
  ];

  let dataHoje = new Date();
  let anoSelecionado = dataHoje.getFullYear();
  let mesSelecionado = dataHoje.getMonth();

  let dadosMesSelecionado = [];

  // Funções principais
  function chaveMes(ano, mes) {
    return `financas_${ano}_${mes}`;
  }

  function salvarDadosMes(ano, mes, dados) {
    localStorage.setItem(chaveMes(ano, mes), JSON.stringify(dados));
  }

  function carregarDadosMes(ano, mes) {
    const dadosRaw = localStorage.getItem(chaveMes(ano, mes));
    if (dadosRaw) {
      return JSON.parse(dadosRaw);
    }
    return [];
  }

  function atualizarMesAnoAtual() {
    mesAnoAtual.textContent = `${mesesNomes[mesSelecionado]} / ${anoSelecionado}`;
  }

  function atualizarInterface() {
    atualizarMesAnoAtual();
    dadosMesSelecionado = carregarDadosMes(anoSelecionado, mesSelecionado);
    atualizarResumo();
    desenharGrafico();
    atualizarHistorico();
    limparFormulario();
  }

  // Inicialização
  function init() {
    atualizarInterface();
    adicionarEventos();
  }

  function adicionarEventos() {
    // Tabs
    tabLancamento.addEventListener("click", () => {
      tabLancamento.classList.add("active");
      tabHistorico.classList.remove("active");
      telaLancamento.style.display = "block";
      telaHistorico.style.display = "none";
    });

    tabHistorico.addEventListener("click", () => {
      tabHistorico.classList.add("active");
      tabLancamento.classList.remove("active");
      telaHistorico.style.display = "block";
      telaLancamento.style.display = "none";
    });

    // Navegação meses
    btnMesAnterior.addEventListener("click", () => {
      if (mesSelecionado === 0) {
        mesSelecionado = 11;
        anoSelecionado--;
      } else {
        mesSelecionado--;
      }
      atualizarInterface();
    });

    btnMesProximo.addEventListener("click", () => {
      if (mesSelecionado === 11) {
        mesSelecionado = 0;
        anoSelecionado++;
      } else {
        mesSelecionado++;
      }
      atualizarInterface();
    });

    // Cálculo ganhos líquidos no formulário
    ganhosBrutosInput.addEventListener("input", calcularLiquido);
    gastosInput.addEventListener("input", calcularLiquido);

    function calcularLiquido() {
      const ganhos = parseFloat(ganhosBrutosInput.value) || 0;
      const gastos = parseFloat(gastosInput.value) || 0;
      const liquido = ganhos - gastos;
      ganhosLiquidosInput.value = liquido >= 0 ? liquido.toFixed(2) : "0.00";
    }

    // Lançar dados
    formLancamento.addEventListener("submit", lancarDados);

    // Apagar mês
    btnApagarMes.addEventListener("click", apagarMes);

    // Exportar mês
    btnExportarMes.addEventListener("click", exportarMesAtual);
  }

  // Função lançar dados do dia atual do mês selecionado
  function lancarDados(event) {
    event.preventDefault();
    const ganhos = parseFloat(ganhosBrutosInput.value) || 0;
    const gastos = parseFloat(gastosInput.value) || 0;

    if (ganhos < 0 || gastos < 0) {
      alert("Valores não podem ser negativos.");
      return;
    }
    const liquido = ganhos - gastos;
    if (liquido < 0) {
      alert("Ganhos líquidos não podem ser negativos. Verifique os valores.");
      return;
    }

    // Data do lançamento: dia atual do mês selecionado ou dia 1 se mês/ano diferente do atual
    let dia = new Date().getDate();
    const hoje = new Date();
    if (hoje.getFullYear() !== anoSelecionado || hoje.getMonth() !== mesSelecionado) {
      dia = 1;
    }

    const dataLancamento = `${anoSelecionado}-${(mesSelecionado + 1).toString().padStart(2, "0")}-${dia.toString().padStart(2, "0")}`;

    // Criar lançamento
    const lancamento = {
      id: gerarId(),
      data: dataLancamento,
      ganhos,
      gastos,
      liquido
    };

    dadosMesSelecionado.push(lancamento);
    salvarDadosMes(anoSelecionado, mesSelecionado, dadosMesSelecionado);

    atualizarInterface();
    alert("Lançamento adicionado com sucesso!");
  }

  function gerarId() {
    return '_' + Math.random().toString(36).substr(2, 9);
  }

  // Atualizar resumo cards
  function atualizarResumo() {
    const totalGanhos = dadosMesSelecionado.reduce((acc, cur) => acc + cur.ganhos, 0);
    const totalGastos = dadosMesSelecionado.reduce((acc, cur) => acc + cur.gastos, 0);
    const totalLiquidos = dadosMesSelecionado.reduce((acc, cur) => acc + cur.liquido, 0);

    cardGanhos.textContent = `R$ ${totalGanhos.toFixed(2)}`;
    cardGastos.textContent = `R$ ${totalGastos.toFixed(2)}`;
    cardLiquidos.textContent = `R$ ${totalLiquidos.toFixed(2)}`;

    atualizarMediaDiariaGanhos();
  }

  // Atualizar média diária de ganhos líquidos
  function atualizarMediaDiariaGanhos() {
    const diasUnicos = [...new Set(dadosMesSelecionado.map(d => d.data))];
    if (diasUnicos.length === 0) {
      mediaContainer.textContent = "Média diária de ganhos: R$ 0,00";
      return;
    }
    const somaLiquidos = dadosMesSelecionado.reduce((acc, cur) => acc + cur.liquido, 0);
    const media = somaLiquidos / diasUnicos.length;
    mediaContainer.textContent = `Média diária de ganhos: R$ ${media.toFixed(2)}`;
  }

  // Desenhar gráfico pizza 3D
  function desenharGrafico() {
    if (dadosMesSelecionado.length === 0) {
      piechartDiv.innerHTML = "<p style='text-align:center; color:#777;'>Nenhum dado para exibir gráfico.</p>";
      return;
    }

    const totalGanhosLiquidos = dadosMesSelecionado.reduce((acc, cur) => acc + cur.liquido, 0);
    const totalGastos = dadosMesSelecionado.reduce((acc, cur) => acc + cur.gastos, 0);
    const total = totalGanhosLiquidos + totalGastos;

    const data = google.visualization.arrayToDataTable([
      ['Tipo', 'Valor'],
      ['Ganhos Líquidos', totalGanhosLiquidos],
      ['Gastos', totalGastos],
    ]);

    let corGastos = '#d32f2f'; // vermelho padrão
    if (total > 0) {
      const percGastos = totalGastos / total;
      if (percGastos > 0.3) {
        corGastos = '#fbc02d'; // amarelo
      }
    }

    const options = {
      title: 'Distribuição de Ganhos Líquidos e Gastos',
      is3D: true,
      slices: {
        0: { color: '#388e3c' }, // verde ganhos líquidos
        1: { color: corGastos }, // cor dinâmica gastos
      },
      legend: { position: 'bottom' },
      backgroundColor: 'transparent',
      chartArea: { width: '90%', height: '75%' }
    };

    const chart = new google.visualization.PieChart(piechartDiv);
    chart.draw(data, options);
  }

  // Atualizar histórico tabela
  function atualizarHistorico() {
    historicoBody.innerHTML = "";

    if (dadosMesSelecionado.length === 0) {
      historicoBody.innerHTML = `<tr><td colspan="5" style="text-align:center; color:#777;">Nenhum lançamento registrado para este mês.</td></tr>`;
      return;
    }

    dadosMesSelecionado
      .sort((a, b) => new Date(a.data) - new Date(b.data))
      .forEach((lanc) => {
        const tr = document.createElement("tr");

        // Data com input date para edição
        const tdData = document.createElement("td");
        const inputData = document.createElement("input");
        inputData.type = "date";
        inputData.value = lanc.data;
        inputData.style.width = "110px";
        inputData.addEventListener("change", (e) => editarLancamento(lanc.id, "data", e.target.value));
tdData.appendChild(inputData);

        // Ganhos editáveis
        const tdGanhos = document.createElement("td");
        const inputGanhos = document.createElement("input");
        inputGanhos.type = "number";
        inputGanhos.min = 0;
        inputGanhos.step = "0.01";
        inputGanhos.value = lanc.ganhos.toFixed(2);
        inputGanhos.style.width = "100px";
        inputGanhos.addEventListener("change", (e) => editarLancamento(lanc.id, "ganhos", parseFloat(e.target.value)));
        tdGanhos.appendChild(inputGanhos);

        // Gastos editáveis
        const tdGastos = document.createElement("td");
        const inputGastos = document.createElement("input");
        inputGastos.type = "number";
        inputGastos.min = 0;
        inputGastos.step = "0.01";
        inputGastos.value = lanc.gastos.toFixed(2);
        inputGastos.style.width = "100px";
        inputGastos.addEventListener("change", (e) => editarLancamento(lanc.id, "gastos", parseFloat(e.target.value)));
        tdGastos.appendChild(inputGastos);

        // Líquido calculado
        const tdLiquido = document.createElement("td");
        tdLiquido.textContent = `R$ ${(lanc.ganhos - lanc.gastos).toFixed(2)}`;

        // Botão apagar lançamento
        const tdAcoes = document.createElement("td");
        const btnApagar = document.createElement("button");
        btnApagar.textContent = "Apagar";
        btnApagar.classList.add("delete");
        btnApagar.title = "Apagar lançamento";
        btnApagar.addEventListener("click", () => apagarLancamento(lanc.id));
        tdAcoes.appendChild(btnApagar);

        // Append td's na tr
        tr.appendChild(tdData);
        tr.appendChild(tdGanhos);
        tr.appendChild(tdGastos);
        tr.appendChild(tdLiquido);
        tr.appendChild(tdAcoes);

        historicoBody.appendChild(tr);
      });
  }

  // Editar lançamento: campo pode ser "data", "ganhos" ou "gastos"
  function editarLancamento(id, campo, novoValor) {
    const idx = dadosMesSelecionado.findIndex(l => l.id === id);
    if (idx === -1) return;

    if (campo === "data") {
      // Validar formato YYYY-MM-DD e se está dentro do mês/ano selecionado
      if (!/^\d{4}-\d{2}-\d{2}$/.test(novoValor)) {
        alert("Data inválida.");
        atualizarHistorico();
        return;
      }
      const dataDate = new Date(novoValor);
      if (dataDate.getFullYear() !== anoSelecionado || dataDate.getMonth() !== mesSelecionado) {
        alert(`Data deve estar dentro do mês ${mesesNomes[mesSelecionado]} de ${anoSelecionado}.`);
        atualizarHistorico();
        return;
      }
      dadosMesSelecionado[idx].data = novoValor;
    } else if (campo === "ganhos") {
      if (isNaN(novoValor) || novoValor < 0) {
        alert("Ganhos inválidos.");
        atualizarHistorico();
        return;
      }
      dadosMesSelecionado[idx].ganhos = novoValor;
    } else if (campo === "gastos") {
      if (isNaN(novoValor) || novoValor < 0) {
        alert("Gastos inválidos.");
        atualizarHistorico();
        return;
      }
      dadosMesSelecionado[idx].gastos = novoValor;
    }

    // Recalcular líquido
    const ganhosAtual = dadosMesSelecionado[idx].ganhos || 0;
    const gastosAtual = dadosMesSelecionado[idx].gastos || 0;
    const liquido = ganhosAtual - gastosAtual;
    dadosMesSelecionado[idx].liquido = liquido >= 0 ? liquido : 0;

    salvarDadosMes(anoSelecionado, mesSelecionado, dadosMesSelecionado);
    atualizarResumo();
    desenharGrafico();
    atualizarHistorico();
  }

  // Apagar lançamento específico
  function apagarLancamento(id) {
    if (!confirm("Deseja apagar este lançamento?")) return;
    dadosMesSelecionado = dadosMesSelecionado.filter(l => l.id !== id);
    salvarDadosMes(anoSelecionado, mesSelecionado, dadosMesSelecionado);
    atualizarResumo();
    desenharGrafico();
    atualizarHistorico();
  }

  // Apagar mês atual com confirmação
  function apagarMes() {
    if (confirm(`Tem certeza que deseja apagar TODO o histórico do mês de ${mesesNomes[mesSelecionado]} / ${anoSelecionado}? Essa ação não pode ser desfeita.`)) {
      localStorage.removeItem(chaveMes(anoSelecionado, mesSelecionado));
      dadosMesSelecionado = [];
      atualizarResumo();
      desenharGrafico();
      atualizarHistorico();
      alert("Histórico do mês apagado com sucesso!");
    }
  }

  // Exportar mês atual em CSV
  function exportarMesAtual() {
    if (dadosMesSelecionado.length === 0) {
      alert("Não há dados para exportar neste mês.");
      return;
    }
    const header = ["Data", "Ganhos Brutos", "Gastos", "Ganhos Líquidos"];
    const linhas = dadosMesSelecionado.map(l => [
      l.data,
      l.ganhos.toFixed(2),
      l.gastos.toFixed(2),
      l.liquido.toFixed(2),
    ]);
    const csvContent = [header, ...linhas].map(e => e.join(";")).join("\n");
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);

    const a = document.createElement("a");
    a.href = url;
    a.download = `controle_financeiro_${anoSelecionado}_${(mesSelecionado + 1).toString().padStart(2, "0")}.csv`;
    a.style.display = "none";
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  // Inicializar app quando Google Charts carregar
  google.charts.setOnLoadCallback(init);

  // Atualiza gráfico ao redimensionar janela
  window.addEventListener("resize", desenharGrafico);

</script>
